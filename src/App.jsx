import React, { useEffect, useMemo, useState } from 'react'

const tg = window.Telegram?.WebApp

function useTelegramTheme(){
  useEffect(()=>{
    if(!tg) return
    const apply = ()=>{
      const tp = tg.themeParams || {}
      document.documentElement.style.setProperty('--tg-bg', tp.bg_color || '#F3EEF1')
      document.documentElement.style.setProperty('--tg-text', tp.text_color || '#121212')
    }
    tg.ready()
    tg.expand()
    apply()
    tg.onEvent('themeChanged', apply)
    return ()=> tg.offEvent('themeChanged', apply)
  },[])
}

function useLocalState(key, initial){
  const [val,setVal] = useState(()=>{
    try{ const s = localStorage.getItem(key); return s? JSON.parse(s) : initial }catch{ return initial }
  })
  useEffect(()=>{ try{ localStorage.setItem(key, JSON.stringify(val)) }catch{} }, [key,val])
  return [val,setVal]
}

function CircleProgress({ value=0, size=180, stroke=16, color="#C2DC80" }){
  const r = (size - stroke)/2
  const c = 2*Math.PI*r
  const dash = Math.max(0, Math.min(1, value)) * c
  return (
    <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
      <circle cx={size/2} cy={size/2} r={r} stroke="#ffffff55" strokeWidth={stroke} fill="none" />
      <circle cx={size/2} cy={size/2} r={r} stroke={color} strokeWidth={stroke} fill="none"
        strokeLinecap="round"
        strokeDasharray={`${dash} ${c-dash}`}
        transform={`rotate(-90 ${size/2} ${size/2})`} />
      <text x="50%" y="50%" dominantBaseline="middle" textAnchor="middle" fontSize="20" fill="currentColor">
        {Math.round(value*100)}%
      </text>
    </svg>
  )
}

function Bunny({ mood='smile' }){
  // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫. –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ PNG/WebP –≤ /public/bunny/*
  const map = {
    smile:'üê∞', shine:'‚ú®üê∞‚ú®', sad:'ü•∫üê∞', chef:'üç≥üê∞', soup:'üç≤üê∞', tea:'ü´ñüê∞', thumb:'üëçüê∞', shock:'üòÆüê∞'
  }
  return <div className="text-5xl">{map[mood] || 'üê∞'}</div>
}

function TabButton({active,children,onClick}){
  return (
    <button onClick={onClick}
      className={`px-4 py-2 rounded-full ${active?'bg-lumoBerry text-white':'bg-white text-black/80'} transition`}>
      {children}
    </button>
  )
}

export default function App(){
  useTelegramTheme()

  // --- Profile (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É–ø—Ä–æ—â—ë–Ω –≤ MVP 0) ---
  const [profile,setProfile] = useLocalState('lumo.profile', {
    name:'', sex:'female', age:30, height:170, weight:65, goal:'balance', waterGoalMl: 2000, lang:'ru'
  })

  // --- Water tracker ---
  const [today,setToday] = useLocalState('lumo.water.today', {
    date: new Date().toISOString().slice(0,10), ml: 0, step: 250
  })
  useEffect(()=>{
    const d = new Date().toISOString().slice(0,10)
    if (today.date !== d) setToday({date:d, ml:0, step: today.step})
  }, []) // —Å–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ

  const progress = Math.min(1, today.ml / (profile.waterGoalMl||2000))
  const waterMood = progress >= 1 ? 'shine' : (new Date().getHours() >= 19 && progress < 0.6 ? 'sad' : 'smile')

  function addWater(ml){ setToday(t => ({...t, ml: t.ml + ml})) }

  // --- Meals tracker ---
  const [meals,setMeals] = useLocalState('lumo.meals', {
    date: new Date().toISOString().slice(0,10),
    breakfast: false, lunch:false, dinner:false, snack:false
  })
  useEffect(()=>{
    const d = new Date().toISOString().slice(0,10)
    if (meals.date !== d) setMeals({date:d, breakfast:false, lunch:false, dinner:false, snack:false})
  },[])

  const [mood,setMood] = useState('smile')
  function markMeal(type){
    setMeals(m => ({...m, [type]: !m[type]}))
    const map = { breakfast:'chef', lunch:'soup', dinner:'tea', snack:'smile' }
    setMood(map[type] || 'smile')
    setTimeout(()=> setMood(waterMood), 1500)
  }

  // --- Tips (—Å–æ–≤–µ—Ç –¥–Ω—è) ---
  const tips = useMemo(()=>[
    {title:'–°–æ–≤–µ—Ç –¥–Ω—è', body:'–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã ‚Äî —ç—Ç–æ —É—Å–∫–æ—Ä–∏—Ç –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç.'},
    {title:'–°–æ–≤–µ—Ç –¥–Ω—è', body:'–ù–µ –±–æ–π—Å—è —É–≥–ª–µ–≤–æ–¥–æ–≤: —Ü–µ–ª—å–Ω—ã–µ –∫—Ä—É–ø—ã –∏ —Ñ—Ä—É–∫—Ç—ã –¥–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é –∏ –∫–ª–µ—Ç—á–∞—Ç–∫—É.'},
    {title:'–°–æ–≤–µ—Ç –¥–Ω—è', body:'–ï—Å–ª–∏ –æ—Ç–µ–∫–∞–µ—à—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–æ–ª—å: —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–æ–ª–∏ —á–∞—Å—Ç–æ –¥–∞—ë—Ç –±—ã—Å—Ç—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç.'}
  ],[])
  const tipIdx = (new Date().getFullYear()*1000 + new Date().getMonth()*50 + new Date().getDate()) % tips.length
  const tip = tips[tipIdx]

  // --- Tabs ---
  const [tab,setTab] = useLocalState('lumo.tab', 'dashboard')

  // --- Telegram MainButton: ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –≤ —á–∞—Ç
  useEffect(()=>{
    if(!tg) return
    const text = [
      `üê∞ Lumo ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è`,
      `–í–æ–¥–∞: ${today.ml} –º–ª / ${profile.waterGoalMl} –º–ª`,
      `–ü—Ä–∏—ë–º—ã –ø–∏—â–∏: ü•£ ${meals.breakfast?'‚úÖ':'‚Äî'} üç≤ ${meals.lunch?'‚úÖ':'‚Äî'} üçΩÔ∏è ${meals.dinner?'‚úÖ':'‚Äî'} üçé ${meals.snack?'‚úÖ':'‚Äî'}`
    ].join('\n')
    tg.MainButton.setParams({ text:'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', is_active:true, is_visible:true, color:'#EA9CAF' })
    const onClick = ()=> tg.sendData(text)
    tg.onEvent('mainButtonClicked', onClick)
    return ()=> tg.offEvent('mainButtonClicked', onClick)
  }, [today,meals,profile])

  return (
    <div className="min-h-screen px-4 py-3" style={{background:'#F3EEF1'}}>
      {/* Header */}
      <div className="flex items-center justify-between mb-3">
        <div className="text-lg font-semibold">Lumo</div>
        <div className="text-sm text-black/60">–ù—É—Ç—Ä–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
      </div>

      {/* Tabs */}
      <div className="flex gap-2 mb-4">
        <TabButton active={tab==='dashboard'} onClick={()=>setTab('dashboard')}>–ì–ª–∞–≤–Ω–∞—è</TabButton>
        <TabButton active={tab==='meals'}     onClick={()=>setTab('meals')}>–ü–∏—Ç–∞–Ω–∏–µ</TabButton>
        <TabButton active={tab==='knowledge'} onClick={()=>setTab('knowledge')}>–ó–Ω–∞–Ω–∏—è</TabButton>
        <TabButton active={tab==='profile'}   onClick={()=>setTab('profile')}>–ü—Ä–æ—Ñ–∏–ª—å</TabButton>
      </div>

      {tab==='dashboard' && (
        <div className="bg-white rounded-2xl p-4 shadow">
          <div className="flex flex-col items-center gap-2">
            <Bunny mood={waterMood} />
            <div className="text-black/70">–í–æ–¥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</div>
            <CircleProgress value={progress} color="#C2DC80" />
            <div className="text-xl font-semibold">{today.ml} / {profile.waterGoalMl} –º–ª</div>
            <button
              className="mt-3 px-5 py-3 rounded-full text-white font-medium"
              style={{background:'#EA9CAF'}}
              onClick={()=> addWater(today.step)}>
              + –°—Ç–∞–∫–∞–Ω (+{today.step} –º–ª)
            </button>
            <button className="mt-2 text-sm underline text-black/60" onClick={()=> setTab('profile')}>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–≥ –∏ —Ü–µ–ª—å</button>
          </div>

          <div className="mt-6 p-3 rounded-xl" style={{background:'#C2DC8033'}}>
            <div className="flex items-start gap-3">
              <div className="text-2xl">üëçüê∞</div>
              <div>
                <div className="text-sm font-semibold">{tip.title}</div>
                <div className="text-sm opacity-80">{tip.body}</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {tab==='meals' && (
        <div className="bg-white rounded-2xl p-4 shadow">
          <div className="flex flex-col items-center gap-3">
            <Bunny mood={mood} />
            <div className="grid grid-cols-2 gap-3 w-full">
              <button className="p-4 rounded-2xl bg-lumoPink text-white font-semibold" onClick={()=>markMeal('breakfast')}>
                –ó–∞–≤—Ç—Ä–∞–∫ {meals.breakfast?'‚úÖ':''}
              </button>
              <button className="p-4 rounded-2xl bg-lumoBerry text-white font-semibold" onClick={()=>markMeal('lunch')}>
                –û–±–µ–¥ {meals.lunch?'‚úÖ':''}
              </button>
              <button className="p-4 rounded-2xl bg-lumoGreen text-black font-semibold" onClick={()=>markMeal('dinner')}>
                –£–∂–∏–Ω {meals.dinner?'‚úÖ':''}
              </button>
              <button className="p-4 rounded-2xl bg-white border border-black/10 font-semibold" onClick={()=>markMeal('snack')}>
                –ü–µ—Ä–µ–∫—É—Å {meals.snack?'‚úÖ':''}
              </button>
            </div>
            <div className="text-sm text-black/60">–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –ø—Ä–∏—ë–º? –ù–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É.</div>
          </div>
        </div>
      )}

      {tab==='knowledge' && (
        <div className="bg-white rounded-2xl p-4 shadow grid gap-3">
          {[
            {k:'water', title:'–í–æ–¥–∞', icon:'üíßüê∞'},
            {k:'protein', title:'–ë–µ–ª–∫–∏', icon:'üèãÔ∏èüê∞'},
            {k:'fat', title:'–ñ–∏—Ä—ã', icon:'ü•ëüê∞'},
            {k:'carb', title:'–£–≥–ª–µ–≤–æ–¥—ã', icon:'üçûüê∞'},
            {k:'when', title:'–ö–æ–≥–¥–∞ –µ—Å—Ç—å', icon:'‚è∞üê∞'},
            {k:'how', title:'–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –µ–¥—É', icon:'üìèüê∞'},
            {k:'cheat', title:'–ß–∏—Ç–º–∏–ª', icon:'üçîüê∞'},
            {k:'edema', title:'–û—Ç–µ–∫–∏', icon:'üßÇüê∞'}
          ].map(item=>(
            <details key={item.k} className="rounded-xl border border-black/10 p-3">
              <summary className="cursor-pointer flex items-center gap-2">
                <span className="text-xl">{item.icon}</span>
                <span className="font-medium">{item.title}</span>
              </summary>
              <div className="mt-2 text-sm text-black/75 leading-relaxed">
                (–¢—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç—å—è: –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤/–±—ç–∫–µ–Ω–¥–∞. –ü–æ–∫–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è MVP 0.)
              </div>
            </details>
          ))}
        </div>
      )}

      {tab==='profile' && (
        <div className="bg-white rounded-2xl p-4 shadow grid gap-3">
          <div className="flex items-center gap-3">
            <Bunny mood="smile" />
            <div className="font-semibold">–ü—Ä–æ—Ñ–∏–ª—å</div>
          </div>
          <label className="grid gap-1 text-sm">
            –ò–º—è
            <input className="p-3 rounded-xl border" value={profile.name} onChange={e=>setProfile({...profile, name:e.target.value})}/>
          </label>
          <div className="grid grid-cols-2 gap-3">
            <label className="grid gap-1 text-sm">–¶–µ–ª—å
              <select className="p-3 rounded-xl border" value={profile.goal} onChange={e=>setProfile({...profile, goal:e.target.value})}>
                <option value="loss">–ü–æ—Ö—É–¥–µ–Ω–∏–µ</option>
                <option value="gain">–ù–∞–±–æ—Ä</option>
                <option value="balance">–ë–∞–ª–∞–Ω—Å</option>
              </select>
            </label>
            <label className="grid gap-1 text-sm">–®–∞–≥ —Å—Ç–∞–∫–∞–Ω–∞ (–º–ª)
              <input type="number" className="p-3 rounded-xl border" value={today.step}
                onChange={e=>setToday({...today, step: Math.max(50, Number(e.target.value||0))})}/>
            </label>
            <label className="grid gap-1 text-sm">–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –≤–æ–¥—ã (–º–ª)
              <input type="number" className="p-3 rounded-xl border" value={profile.waterGoalMl}
                onChange={e=>setProfile({...profile, waterGoalMl: Math.max(500, Number(e.target.value||0))})}/>
            </label>
            <label className="grid gap-1 text-sm">–Ø–∑—ã–∫
              <select className="p-3 rounded-xl border" value={profile.lang} onChange={e=>setProfile({...profile, lang:e.target.value})}>
                <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                <option value="en">English</option>
              </select>
            </label>
          </div>
          <div className="text-sm text-black/60">–ü–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, –≤–µ—Å –¥–æ–±–∞–≤–∏–º –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ ‚Äî —Å–µ–π—á–∞—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è MVP 0.</div>
        </div>
      )}

      <div className="h-6"></div>
    </div>
  )
}
